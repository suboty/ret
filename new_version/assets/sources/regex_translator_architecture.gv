digraph RegexTranslatorArchitecture {
    graph [dpi=300];
    lexical_analysis_1 [
        label="Lexical Analysis (1.1)\nDialect 1"];
    lexical_analysis_2 [
        label="Lexical Analysis (1.2)\nDialect 2"];
    lexical_analysis_n [
        label="Lexical Analysis (1.3)\nDialect N",
        ordering=out];
    token_optimization_1 [
        label="Token Optimization (2.1)\nDialect 1",
        style=filled,
        background_color=lightgray];
    token_optimization_2 [
        label="Token Optimization (2.2)\nDialect 2",
        style=filled,
        background_color=lightgray];
    token_optimization_n [
        label="Token Optimization (2.3)\nDialect N",
        style=filled,
        background_color=lightgray];
    syntax_analysis [
        label="Syntax Analysis (3)"];
    automata_optimization [
        label="Automata Optimization (4)",
        style=filled,
        background_color=lightgray];
    expression_generator [
        label="Expression Generator (5)"];
        
    lexical_analysis_1 -> token_optimization_1 [
        label="  Tokens\n   Dialect 1"];
    lexical_analysis_2 -> token_optimization_2 [
        label="  Tokens\n   Dialect 2"];
    lexical_analysis_n -> token_optimization_n [
        label="  Tokens\n   Dialect N"];
    token_optimization_1 -> syntax_analysis [
        label="  Optimized Tokens\n   Dialect 1"];
    token_optimization_2 -> syntax_analysis [
        label="  Optimized Tokens\n   Dialect 2"];
    token_optimization_n -> syntax_analysis [
        label="  Optimized Tokens\n   Dialect N"];
    syntax_analysis -> automata_optimization [
        label="  Abstract Syntax Tree (AST)"];
    automata_optimization -> expression_generator [
        label="  Optimized AST"];
}